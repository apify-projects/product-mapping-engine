export = BrowserController;
/**
 * The `BrowserController` serves two purposes. First, it is the base class that
 * specialized controllers like `PuppeteerController` or `PlaywrightController`
 * extend. Second, it defines the public interface of the specialized classes
 * which provide only private methods. Therefore, we do not keep documentation
 * for the specialized classes, because it's the same for all of them.
 * @property {string} id
 * @property {BrowserPlugin} browserPlugin
 *  The `BrowserPlugin` instance used to launch the browser.
 * @property {Browser} browser
 *  Browser representation of the underlying automation library.
 * @property {LaunchContext} launchContext
 *  The configuration the browser was launched with.
 * @hideconstructor
 */
declare class BrowserController extends EventEmitter {
    /**
     * @param {BrowserPlugin} browserPlugin
     */
    constructor(browserPlugin: any);
    id: string;
    browserPlugin: any;
    browser: any;
    launchContext: any;
    isActive: boolean;
    supportsPageOptions: boolean;
    isActivePromise: Promise<any>;
    _activate: (value: any) => void;
    hasBrowserPromise: Promise<any>;
    commitBrowser: (value: any) => void;
    activePages: number;
    totalPages: number;
    lastPageOpenedAt: number;
    /**
     * Activates the BrowserController. If you try to open new pages before
     * activation, the pages will get queued and will only be opened after
     * activate is called.
     * @ignore
     */
    activate(): void;
    /**
     * @param {Browser} browser
     * @param {LaunchContext} launchContext
     * @ignore
     */
    assignBrowser(browser: any, launchContext: any): void;
    /**
     * Gracefully closes the browser and makes sure
     * there will be no lingering browser processes.
     *
     * Emits 'browserClosed' event.
     * @return {Promise<void>}
     */
    close(): Promise<void>;
    /**
     * Immediately kills the browser process.
     *
     * Emits 'browserClosed' event.
     * @return {Promise<void>}
     */
    kill(): Promise<void>;
    /**
     * Opens new browser page.
     * @param {object} pageOptions
     * @return {Promise<Page>}
     * @ignore
     */
    newPage(pageOptions: object): Promise<any>;
    /**
     * @param page {Object}
     * @param cookies {Array<object>}
     * @return {Promise<void>}
     */
    setCookies(page: Object, cookies: Array<object>): Promise<void>;
    /**
     *
     * @param page {Object}
     * @return {Promise<Array<object>>}
     */
    getCookies(page: Object): Promise<Array<object>>;
    /**
     * @return {Promise<void>}
     * @private
     */
    private _close;
    /**
     * @return {Promise<void>}
     * @private
     */
    private _kill;
    /**
     * @param {object} pageOptions
     * @return {Promise<Page>}
     * @private
     */
    private _newPage;
    /**
     * @param {Page} page
     * @param {object[]} cookies
     * @return {Promise<void>}
     * @private
     */
    private _setCookies;
    /**
     * @param {Page} page
     * @return {Promise<Array<object>>}
     * @private
     */
    private _getCookies;
}
import EventEmitter = require("events");
//# sourceMappingURL=browser-controller.d.ts.map