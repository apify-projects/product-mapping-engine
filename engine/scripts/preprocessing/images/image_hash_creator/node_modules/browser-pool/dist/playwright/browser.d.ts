export = Browser;
/**
 * @typedef BrowserOptions
 * @param {import('playwright').BrowserContext} browserContext
 * @param {string} version
 *
*/
/**
 * Browser wrapper created to have consistent API with persistent and non-persistent contexts.
 */
declare class Browser extends EventEmitter {
    /**
     *
     * @param {BrowserOptions} options
     */
    constructor(options?: any);
    browserContext: any;
    _version: any;
    _isConnected: boolean;
    /**
     * Closes browser and all pages/contexts assigned to it.
     */
    close(): Promise<void>;
    /**
     * Returns an array of all open browser contexts. In a newly created browser, this will return zero browser contexts.
     * @returns {Array<import('playwright').BrowserContext>}
     */
    contexts(): Array<import('playwright').BrowserContext>;
    /**
     * Indicates that the browser is connected.
     * @returns {boolean}
     */
    isConnected(): boolean;
    /**
     * Method added for API consistency.
     * Should not be used.
     * Throws an error if called.
     */
    newContext(): Promise<void>;
    /**
     * Creates a new page in a new browser context. Closing this page will close the context as well.
     * @param  {...any} args - New Page options. See https://playwright.dev/docs/next/api/class-browser#browsernewpageoptions.
     */
    newPage(...args: any[]): Promise<any>;
    /**
    * Returns the browser version.
    * @returns {string} browser version.
    */
    version(): string;
}
declare namespace Browser {
    export { BrowserOptions };
}
import EventEmitter = require("events");
type BrowserOptions = any;
//# sourceMappingURL=browser.d.ts.map