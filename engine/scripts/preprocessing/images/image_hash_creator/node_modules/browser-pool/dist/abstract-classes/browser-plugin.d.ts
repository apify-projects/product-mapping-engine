export = BrowserPlugin;
/**
 * The `BrowserPlugin` serves two purposes. First, it is the base class that
 * specialized controllers like `PuppeteerPlugin` or `PlaywrightPlugin` extend.
 * Second, it allows the user to configure the automation libraries and
 * feed them to {@link BrowserPool} for use.
 */
declare class BrowserPlugin {
    /**
     * @param {object} library
     *  Each plugin expects an instance of the object with the `.launch()` property.
     *  For Puppeteer, it is the `puppeteer` module itself, whereas for Playwright
     *  it is one of the browser types, such as `puppeteer.chromium`.
     *  `BrowserPlugin` does not include the library. You can choose any version
     *  or fork of the library. It also keeps `browser-pool` installation small.
     * @param {object} [options]
     * @param {object} [options.launchOptions]
     *  Options that will be passed down to the automation library. E.g.
     *  `puppeteer.launch(launchOptions);`. This is a good place to set
     *  options that you want to apply as defaults. To dynamically override
     *  those options per-browser, see the `preLaunchHooks` of {@link BrowserPool}.
     * @param {string} [options.proxyUrl]
     *  Automation libraries configure proxies differently. This helper allows you
     *  to set a proxy URL without worrying about specific implementations.
     *  It also allows you use an authenticated proxy without extra code.
     * @property {boolean} [useIncognitoPages=false]
     *  By default pages share the same browser context.
     *  If set to true each page uses its own context that is destroyed once the page is closed or crashes.
     * @property {object} [userDataDir]
     *  Path to a User Data Directory, which stores browser session data like cookies and local storage.
     */
    constructor(library: object, options?: {
        launchOptions?: object | undefined;
        proxyUrl?: string | undefined;
    } | undefined);
    name: string;
    library: object;
    launchOptions: object;
    proxyUrl: string | undefined;
    userDataDir: any;
    useIncognitoPages: any;
    /**
     * Creates a `LaunchContext` with all the information needed
     * to launch a browser. Aside from library specific launch options,
     * it also includes internal properties used by `BrowserPool` for
     * management of the pool and extra features.
     *
     * @param {object} [options]
     * @param {string} [options.id]
     * @param {object} [options.launchOptions]
     * @param {string} [options.proxyUrl]
     * @property {boolean} [useIncognitoPages]
     *  If set to false pages use share the same browser context.
     *  If set to true each page uses its own context that is destroyed once the page is closed or crashes.
     * @property {object} [userDataDir]
     *  Path to a User Data Directory, which stores browser session data like cookies and local storage.
     * @return {LaunchContext}
     * @ignore
     */
    createLaunchContext(options?: {
        id?: string | undefined;
        launchOptions?: object | undefined;
        proxyUrl?: string | undefined;
    } | undefined): LaunchContext;
    /**
     * @return {BrowserController}
     * @ignore
     */
    createController(): any;
    /**
     * Launches the browser using provided launch context.
     *
     * @param {LaunchContext} [launchContext]
     * @return {Promise<Browser>}
     * @ignore
     */
    launch(launchContext?: LaunchContext | undefined): Promise<any>;
    /**
     * @param {LaunchContext} launchContext
     * @return {Promise<void>}
     * @private
     */
    private _addProxyToLaunchOptions;
    /**
     * @param {LaunchContext} launchContext
     * @return {Promise<Browser>}
     * @private
     */
    private _launch;
    /**
     * @return {BrowserController}
     * @private
     */
    private _createController;
    /**
     * Starts proxy-chain server - https://www.npmjs.com/package/proxy-chain#anonymizeproxyproxyurl-callback
     * @param {string} proxyUrl
     *  Proxy URL with username and password.
     * @return {Promise<string>}
     *  URL of the anonymization proxy server that needs to be closed after the proxy is not used anymore.
     * @private
     */
    private _getAnonymizedProxyUrl;
    /**
     *
     * @param {string} proxyUrl
     *  Anonymized proxy URL of a running proxy server.
     * @return {Promise<any>}
     * @private
     */
    private _closeAnonymizedProxy;
    /**
     * Checks if proxy URL should be anonymized.
     * @param {string} proxyUrl
     * @return {boolean}
     * @private
     */
    private _shouldAnonymizeProxy;
    /**
     *
     * @param {string} dir - Absolute path to the directory.
     * @returns {Promise<void>}
     */
    _ensureDir(dir: string): Promise<void>;
}
import LaunchContext = require("../launch-context");
//# sourceMappingURL=browser-plugin.d.ts.map